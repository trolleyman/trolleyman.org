{% extends "account/_base" %}
{% import "_macros" as macros %}
{% block css %}
{{ super() }}
<link rel="stylesheet" href="/static/css/account/register.css">
{% endblock %}
{% block content %}
  <div class="container-fluid mt-5">
    <div class="row justify-content-center">
      <div class="col p-3 form-container">
        <form method="post" action="" class="needs-validation" novalidate>
        <h1 class="h3 mb-3 align-middle font-weight-normal">Register</h1>
          <div class="form-group position-relative">
            <label class="sr-only" for="username">Username</label>
            <input class="form-control" id="username" name="username" type="text" placeholder="Username" required data-custom-validation="validateUsername" data-custom-validation-promise="validateUsernameUnique">
            <div class="position-absolute spinner-border spinner-border-sm" role="status">
              <span class="sr-only">Loading...</span>
            </div>
            <div class="invalid-feedback">
              Please enter a valid username.
            </div>
          </div>
          <div class="form-group mb-0">
            <label class="sr-only" for="email">Email address</label>
            <input class="form-control" id="email" name="email" type="email" placeholder="Email address" required data-custom-validation="validateEmail">
            <div class="invalid-feedback">
              Please enter a valid email address.
            </div>
          </div>
          <div class="form-group">
            <label class="sr-only" for="email2">Confirm email address</label>
            <input class="form-control" id="email2" name="email2" type="email" placeholder="Confirm email address" required data-custom-validation="validateConfirmEmail">
            <div class="invalid-feedback">
              Please enter a valid email address.
            </div>
          </div>
          <div class="form-group mb-0">
            <label class="sr-only" for="password">Password</label>
            <input class="form-control" id="password" name="password" type="password" placeholder="Password" required data-custom-validation="validatePassword">
            <div class="invalid-feedback">
              Please enter a password.
            </div>
          </div>
          <div class="form-group">
            <label class="sr-only" for="password2">Confirm password</label>
            <input class="form-control" id="password2" name="password2" type="password" placeholder="Confirm password" required data-custom-validation="validateConfirmPassword">
            <div class="invalid-feedback">
              Please enter a password.
            </div>
          </div>
          <div class="text-right mr-3">
            <button class="btn btn-primary" type="submit">Register</button>
          </div>
          <hr/>
          <div class="text-small text-muted col">Already a user? <a href="register">Login</a></div>
        </form>
      </div>
    </div>
  </div>
{% endblock %}
{% block js %}
  {{ super() }}
  <script>
    function validateUsername(value) {
      if (value.length == 0) {
        return "Please enter a username.";
      } else if (value.length < {{ username_min_length }}) {
        return "Please enter a username that is at least {{ username_min_length }} characters long.";
      } else if (value.length > {{ username_max_length }}) {
        return "Please enter a username that is at most {{ username_max_length }} characters long.";
      } else if (!/{{ username_regex }}/u.test(value)) {
        return "Please enter a username that consists of only alphanumeric, hyphen or full stop characters.";
      }
      return "";
    }
    
    function validateUsernameUnique(value, cancellationToken) {
      cancellationToken.cancel = () => {
        cancellationToken.cancelled = true;
      };
      return new Promise((resolve, reject) => {
        if (cancellationToken.cancelled) {
          reject(cancellationToken);
        }
        setTimeout(() => {
          if (cancellationToken.cancelled) {
            reject(cancellationToken);
          }
          if (value === 'test123') {
            resolve('Name cannot be "test123"');
          } else {
            resolve('');
          }
        }, 3000);
      });
    }

    function validateEmail(value) {
      if (value.length == 0) {
        return "Please enter an email address.";
      } else if (!/^\S+@\S+\.\S+$/u.test(value)) {
        return "Please enter a valid email address of the form name@example.com"
      } else if (value.length > {{ email_max_length }}) {
        return "Please enter an email address that is at most {{ email_max_length }} characters long.";
      }
      return "";
    }

    function validateConfirmEmail(value) {
      var invalid = validateEmail(value);
      if (invalid) {
        return invalid;
      } else if (value != $('#email').val()) {
        return "Entered email addresses do not match";
      }
      return "";
    }

    function validatePassword(value) {
      if (value.length == 0) {
        return "Please enter a password.";
      } else if (value.length < {{ password_min_length }}) {
        return "Please enter a password that is at least {{ password_min_length }} characters long.";
      } else if (value.length > {{ password_max_length }}) {
        return "Please enter a password that is at most {{ password_max_length }} characters long.";
      } else if (!/[0-9]/.test(value)) {
        return "Please enter a password that contains numeric characters (0-9).";
      }
      return "";
    }

    function validateConfirmPassword(value) {
      if (value != $('#password').val()) {
        return "Entered passwords do not match";
      }
      return "";
    }
  </script>
{% endblock %}
