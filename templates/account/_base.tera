{% extends "_base" %}
{% import "_macros" as macros %}
{% block head %}
  {{ super() }}
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Chrome, Firefox OS and Opera -->
  <meta name="theme-color" content="#2e3141">
  <!-- Windows Phone -->
  <meta name="msapplication-navbutton-color" content="#2e3141">

  {% block css %}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <link rel="stylesheet" href="/static/css/account/base.css">
  {% endblock %}
{% endblock %}
{% block body %}
  <nav class="navbar navbar-expand-lg bg-header mb-3 shadow">
    <div class="container-fluid">
      <div class="navbar-header">
        <a class="navbar-brand text-white" href="/">trolleyman.org</a>
      </div>
      <div class="nav navbar-right">
        <a class="nav-link text-white" href="/account/login">Sign in</a>
        <a class="nav-link text-white" href="/account/register">Register</a>
      </div>
    </div>
  </nav>
  {% block content %}
  {% endblock %}
  {% block js %}
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <script>
    // Disable form submissions if there are invalid fields
    (function() {
      'use strict';
      window.addEventListener('load', function() {
        $(".needs-validation").each((_, form) => {
          var $form = $(form);
          var inputs = $form.find('input').map((_, input) => $(input));
          
          var check = input => {
            var custom = input.data('custom-validation');
            if (custom == null)
              return '';
            
            try {
              var func = eval(custom);
              var invalid = func(input.val());
            } catch(err) {
              console.error(err);
              var invalid = 'Unknown error: ' + err;
            }
            invalid = invalid || '';
            if (invalid) {
              input.siblings('.invalid-feedback').text(invalid);
            }
            input[0].setCustomValidity(invalid);
            return invalid;
          };
          
          var checkAll = () => {
            inputs.each((_, input) => {
              check(input);
            });
          };
          
          var checkPromise = input => {
            var invalid = check(input);
            if (invalid) {
              if (input.data('hasStartedLoading')) {
                input[0].classList.add('is-invalid');
              } else {
                input[0].classList.remove('is-invalid');
              }
              input[0].classList.remove('is-valid');
              input[0].classList.remove('loading');
              var cancellationToken = input.data('cancellationToken');
              if (cancellationToken != null) {
                cancellationToken.cancel();
              }
              return invalid;
            }
            
            var customPromise = input.data('custom-validation-promise');
            if (customPromise == null)
              return;
            
            var value = input.val();
            if (value === input.data('prevValue'))
              return;
            
            var cancellationToken = input.data('cancellationToken');
            if (cancellationToken != null) {
              cancellationToken.cancel();
            }
            var func = eval(customPromise);
            var cancellationToken = { cancel: function() {} };
            input.data('cancellationToken', cancellationToken)
            
            var promise = func(value, cancellationToken);
            input.data('hasStartedLoading', true);
            
            promise.then(invalid => {
              input.data('prevValue', value);
              input[0].classList.remove('loading');
              if (invalid) {
                input[0].classList.add('is-invalid');
                input[0].setCustomValidity(invalid);
                input.siblings('.invalid-feedback').text(invalid);
              } else {
                input[0].classList.add('is-valid');
              }
            }, err => {
              if (cancellationToken.cancelled)
                return;
              
              input[0].classList.remove('loading');
              input[0].classList.add('is-invalid');
              var msg = 'Unknown error: ' + err;
              input[0].setCustomValidity(msg);
              input.siblings('.invalid-feedback').text(msg);
            });
            
            // Set loading
            input[0].classList.remove('is-invalid');
            input[0].classList.remove('is-valid');
            input[0].classList.add('loading');
            input[0].setCustomValidity("Username is being checked");
            input.siblings('.invalid-feedback').text('');
          }
          
          inputs.each((_, input) => {
            var customPromise = input.data('custom-validation-promise');
            if (customPromise != null) {
              input.on('change input', () => checkPromise(input));
            }
            input.on('change input', checkAll);
            $form.submit(checkAll);
          });
          $form.submit(event => {
            if (form.checkValidity() === false) {
              event.preventDefault();
              event.stopPropagation();
            }
            inputs.each((_, input) => {
              var customPromise = input.data('custom-validation-promise');
              if (customPromise == null) {
                input.parent()[0].classList.add('was-validated');
              }
            });
          });
        });
      }, false);
    })();
    </script>
  {% endblock %}
{% endblock %}
